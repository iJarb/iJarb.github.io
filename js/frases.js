// https://github.com/goolord/alpha-nvim/blob/main/lua/alpha/fortune.lua
const frasesDelDia = [
    "La única forma de hacer un gran trabajo es amar lo que haces.",
    "El futuro pertenece a quienes creen en la belleza de sus sueños.",
    "La vida es lo que pasa mientras estás ocupado haciendo otros planes.",
    "Sé el cambio que quieres ver en el mundo.",
    "La imaginación es más importante que el conocimiento.",
    "Calcula el orden de tus algoritmos. Hazte una idea del tiempo que probablemente te llevar antes de escribir el código.",
    "Depurar es dos veces más difícil que escribir el código en primer lugar<br/> Por lo tanto, si escribes el código de la forma más inteligente posible, por definición, no eres lo suficientemente inteligente como para depurarlo. <br/><br/><span style='float:right'>-Brian Kernighan</span> ",
    "Si no terminas, solo estás ocupado, no eres productivo. ",
    "Adaptar programas antiguos para que funcionen en máquinas nuevas suele significar adaptar las máquinas nuevas para que funcionen como las antiguas. <br/><br/><span style='float:right'>- Alan Perlis</span>",
    "Los necios ignoran la complejidad. Los pragmáticos la soportan. Algunos pueden evitarla. Los genios la eliminan <br/><br/><span style='float:right'>- Alan Perlis</span>",
    "Es más fácil cambiar las especificaciones para adaptarlas al programa que al revés. <br/><br/><span style='float:right'>- Alan Perlis</span>",
    "La simplicidad no precede a la complejidad, sino que la sigue. <br/><br/><span style='float:right'>-Alan Perlis</span>",
    "La optimización obstaculiza la evolución. <br/><br/><span style='float:right'>- Alan Perlis</span>",
    "La recursividad es la raíz del cálculo, ya que intercambia descripción por tiempo. <br/><br/><span style='float:right'>-Alan Perlis</span>",
    "Es mejor tener 100 funciones que operan sobre una estructura de datos que 10 funciones sobre 10 estructuras de datos. <br/><br/><span style='float:right'>- Alan Perlis</span>",
    "No hay nada tan inútil como hacer con gran eficiencia algo que no debería hacerse en absoluto. <br/><br/><span style='float:right'>-Peter Drucker</span>",
    "Si no fracasas al menos el 90 % de las veces, es que no estás apuntando lo suficientemente alto. <br/><br/><span style='float:right'>-Alan Kay</span>",
    "Creo que a muchos programadores noveles les gusta utilizar estructuras de datos avanzadas y funciones avanzadas del lenguaje como forma de demostrar su capacidad. Yo lo llamo el síndrome del domador de leones. Estas demostraciones son impresionantes, pero, a menos que se traduzcan en beneficios reales para el proyecto, es mejor evitarlas. <br/><br/><span style='float:right'>-Glyn Williams</span>",
    "Prefiero morir de pasión que de aburrimiento. <br/><br/><span style='float:right'>-Vincent Van Gogh</span>",
    "Si un sistema debe servir al espíritu creativo, debe ser totalmente comprensible para un solo individuo.",
    "El principal reto del informático es no dejarse confundir por las complejidades que él mismo ha creado. <br/><br/><span style='float:right'>-Edsger W. Dijkstra</span>",
    "El progreso en un contexto fijo es casi siempre una forma de optimización.<br/> Los actos creativos no suelen permanecer en el contexto en el que se producen. <br/><br/><span style='float:right'>-Alan Kay</span>",
    "La esencia del XML es la siguiente: el problema que resuelve no es difícil, y no lo resuelve bien. <br/><br/><span style='float:right'>-Phil Wadler</span>",
    "Un buen programador es alguien que siempre mira a ambos lados antes de cruzar una calle de sentido único. <br/><br/><span style='float:right'>-Doug Linder</span>",
    "Los patrones significan «Me he quedado sin lenguaje. <br/><br/><span style='float:right'>-Rich Hickey</span>",
    "Siempre programa como si la persona que acabara manteniendo tu código fuera un psicópata violento que sabe dónde vives. <br/><br/><span style='float:right'>-John Woods</span>",
    "Unix no fue diseñado para impedir que sus usuarios hicieran tonterías, ya que eso también les impediría hacer cosas inteligentes. ",
    "Contrariamente a la creencia popular, Unix es fácil de usar.<br/> Simplemente es muy selectivo a la hora de elegir con quién decide hacerse amigo. ",
    "La perfección se alcanza, no cuando no hay nada más que añadir, sino cuando no hay nada más que quitar. ",
    "Hay dos formas de crear un diseño de software: una es hacerlo tan sencillo que no haya deficiencias evidentes, y la otra es hacerlo tan complicado que no haya deficiencias evidentes. <br/><br/><span style='float:right'>-C.A.R. Hoare</span>",
    "Si no cometes errores, es que no estás trabajando en problemas lo suficientemente difíciles. <br/><br/><span style='float:right'>-Frank Wilczek</span>",
    "Si no empiezas con una especificación, cada fragmento de código que escribes es un parche. <br/><br/><span style='float:right'>-Leslie Lamport</span>",
    "Las cachés son errores en potencia. <br/><br/><span style='float:right'>-Rob Pike</span>",
    "La abstracción no tiene que ver con la vaguedad, sino con ser preciso en un nuevo nivel semántico. <br/><br/><span style='float:right'>-Edsger W. Dijkstra</span>",
    "dd es horrible a propósito.<br/> Es una broma sobre OS/360 JCL.<br/> Pero hoy en día es una broma estandarizada internacionalmente.<br/> Creo que eso lo dice todo. <br/><br/><span style='float:right'>-Rob Pike</span",
    "Todos los bucles son infinitos para los módulos RAM defectuosos.",
    "Todas las expresiones idiomáticas deben aprenderse.<br/> Las buenas expresiones idiomáticas solo hay que aprenderlas una vez. <br/><br/><span style='float:right'>-Alan Cooper</span>",
    "Para que una tecnología tenga éxito, la realidad debe prevalecer sobre las relaciones públicas, ya que no se puede engañar a la naturaleza. <br/><br/><span style='float:right'>-Richard Feynman</span>",
    "Si los programadores fueran electricistas, los programadores paralelos serían expertos en desactivación de bombas.<br/> Ambos cortan cables. <br/><br/><span style='float:right'>-Bartosz Milewski</span>",
    "Los ordenadores son más difíciles de mantener a gran altitud.<br/> El aire más enrarecido reduce el amortiguamiento entre los cabezales y los platos del disco.<br/> Además, hay más radiación.",
    "Casi todos los lenguajes de programación están sobrevalorados por quienes los utilizan. <br/><br/><span style='float:right'>-Larry Wall</span>",
    "Los algoritmos sofisticados son lentos cuando n es pequeño, y n suele ser pequeño. <br/><br/><span style='float:right'>-Rob Pike</span>",
    "Los métodos son simplemente funciones con un primer argumento especial. <br/><br/><span style='float:right'>-Andrew Gerrand</span>",
    "Preocúpate por tu oficio.<br/> ¿Por qué dedicar tu vida a desarrollar software si no te importa hacerlo bien?",
    "Ofrece opciones, no pongas excusas poco convincentes.<br/> En lugar de excusas, ofrece opciones.<br/> No digas que no se puede hacer; explica lo que se puede hacer.",
    "Se un catalizador del cambio.<br/> No se puede forzar el cambio en las personas.<br/> En lugar de eso, muéstrales cómo podría ser el futuro y ayúdalas a participar en su creación.",
    "Haga de la calidad una cuestión de requisitos.<br/> Involucre a sus usuarios en la determinación de los requisitos de calidad reales del proyecto.",
    "Analiza críticamente lo que lees y escuchas.<br/> No te dejes influir por los vendedores, el bombo mediático o los dogmas.<br/> Analiza la información en función de ti y de tu proyecto",
    "DRY: no te repitas.<br/> Cada elemento de conocimiento debe tener una representación única, inequívoca y autorizada dentro de un sistema.",
    "Elimina los efectos entre elementos no relacionados.<br/> Diseña componentes autónomos, independientes y con un único propósito bien definido.",
    "Utiliza balas trazadoras para encontrar el objetivo.<br/> Las balas trazadoras te permiten localizar tu objetivo probando diferentes cosas y viendo lo cerca que caen.",
    "Programa cerca del ámbito del problema», «», «Diseña y programa en el lenguaje de tus usuarios.",
    "Repite el calendario con el código.<br/> Utiliza la experiencia que adquieras a medida que implementas para perfeccionar los plazos del proyecto",
    "Utiliza el poder de los shells de comandos.<br/> Utiliza el shell cuando las interfaces gráficas de usuario no sean suficientes",
    "Utiliza siempre el control del código fuente.<br/> El control del código fuente es una máquina del tiempo para tu trabajo: puedes volver atrás.",
    "No te asustes al depurar.<br/> Respira hondo y ¡PIENSA! en qué podría estar causando el error.",
    "No lo des por sentado, demuéstralo.<br/> Demuestra tus suposiciones en el entorno real, con datos reales y condiciones límite.",
    "Escribe código que escriba código.<br/> Los generadores de código aumentan tu productividad y ayudan a evitar la duplicación.",
    "Diseña con contratos.<br/> Utiliza contratos para documentar y verificar que el código no hace más ni menos de lo que dice hacer",
    "Utiliza aserciones para evitar lo imposible.<br/> Las aserciones validan tus suposiciones.<br/> Úsalas para proteger tu código de un mundo incierto.",
    "Termina lo que empiezas.<br/> Siempre que sea posible, la rutina u objeto que asigna un recurso debe ser responsable de desasignarlo.",
    "Configura, no integres.<br/> Implementa las opciones tecnológicas para una aplicación como opciones de configuración, no a través de la integración o la ingeniería.",
    "Analiza el flujo de trabajo para mejorar la concurrencia.<br/> Aprovecha la concurrencia en el flujo de trabajo de tus usuarios.",
    "Diseña siempre pensando en la concurrencia.<br/> Si permites la concurrencia, diseñarás interfaces más limpias con menos suposiciones.",
    "Utiliza pizarras para coordinar el flujo de trabajo.<br/> Utiliza pizarras para coordinar hechos y agentes dispares, manteniendo al mismo tiempo la independencia y el aislamiento entre los participantes.",
    "Estima el orden de tus algoritmos.<br/> Hazte una idea de cuánto tiempo pueden tardar las cosas antes de escribir el código.",
    "Refactoriza pronto y a menudo.<br/><br/> Al igual que podrías desbrozar y reorganizar un jardín, reescribe, reelabora y rediseña el código cuando sea necesario.<br/> Soluciona la raíz del problema.",
    "Prueba tu software o lo harán tus usuarios.<br/> Prueba sin piedad.<br/> No dejes que tus usuarios encuentren los errores por ti.",
    "No recopiles requisitos, búscalos.<br/> Los requisitos rara vez se encuentran en la superficie.<br/> Están enterrados bajo capas de suposiciones, conceptos erróneos y políticas.",
    "Las abstracciones duran más que los detalles.<br/> Invierte en la abstracción, no en la implementación.<br/> Las abstracciones pueden sobrevivir al aluvión de cambios de diferentes implementaciones y nuevas tecnologías.",
    "No pienses fuera de la caja, encuentra la caja.<br/> Cuando te enfrentes a un problema imposible, identifica las limitaciones reales.<br/> Pregúntate: «¿Tiene que hacerse así? ¿Tiene que hacerse?.",
    "Algunas cosas es mejor hacerlas que describirlas.<br/> No caigas en la espiral de las especificaciones: en algún momento tienes que empezar a programar.",
    "Las herramientas caras no producen mejores diseños.<br/> Ten cuidado con la publicidad exagerada de los proveedores, los dogmas del sector y el aura del precio.<br/> Juzga las herramientas por sus méritos.",
    "No utilices procedimientos manuales.<br/> Un script de shell o un archivo por lotes ejecutará las mismas instrucciones, en el mismo orden, una y otra vez.",
    "La codificación no termina hasta que se ejecutan todas las pruebas.<br/> No hay más que decir.",
    "Prueba la cobertura del estado, no la cobertura del código.<br/> Identifique y pruebe los estados significativos del programa.<br/> No basta con probar las líneas de código.",
    "El inglés es solo un lenguaje de programación.<br/> Escriba los documentos como escribiría el código: respete el principio DRY, utilice metadatos, MVC, generación automática, etc.",
    "Supere ligeramente las expectativas de sus usuarios.<br/> Comprenda las expectativas de sus usuarios y luego ofrézcales un poco más.",
    "Piensa en tu trabajo.<br/> Desactiva el piloto automático y toma el control.<br/> Critica y evalúa constantemente tu trabajo.",
    "No convivas con ventanas rotas».<br/> «Corrija los malos diseños, las decisiones erróneas y el código deficiente cuando los vea.",
    "Recuerda el panorama general.<br/> No te obsesiones tanto con los detalles que te olvides de mirar lo que ocurre a tu alrededor.",
    "Invierte regularmente en tu cartera de conocimientos.<br/>Haz del aprendizaje un hábito.",
    "Importa tanto lo que dices como cómo lo dices.<br/> No sirve de nada tener grandes ideas si no las comunicas de forma eficaz.",
    "Facilita la reutilización.<br/> Si es fácil reutilizar, la gente lo hará.<br/> Crea un entorno que favorezca la reutilización.",
    "No hay decisiones definitivas.<br/> Ninguna decisión es inamovible.<br/> En su lugar, considera cada una como si estuviera escrita en la arena de la playa y planifica el cambio.",
    "Crea prototipos para aprender.<br/> Crear prototipos es una experiencia de aprendizaje.<br/> Su valor no reside en el código que produces, sino en las lecciones que aprendes.",
    "Haz estimaciones para evitar sorpresas.<br/> Haz estimaciones antes de empezar.<br/> Detectarás posibles problemas desde el principio.",
    "Guarda el conocimiento en texto plano.<br/> El texto plano no quedará obsoleto.<br/> Te ayuda a aprovechar tu trabajo y simplifica la depuración y las pruebas.",
    "Utiliza bien un único editor.<br/> El editor debe ser una extensión de tu mano; asegúrate de que tu editor sea configurable, extensible y programable.",
    "Soluciona el problema, no busques culpables.<br/> No importa si el error es culpa tuya o de otra persona: sigue siendo tu problema y hay que solucionarlo.",
    "select no está roto».<br/> Es raro encontrar un error en el sistema operativo o en el compilador, o incluso en un producto o biblioteca de terceros.<br/> Lo más probable es que el error esté en la aplicación.",
    "Aprende un lenguaje de manipulación de texto.<br/> Pasas gran parte del día trabajando con texto.<br/> ¿Por qué no dejar que el ordenador haga parte del trabajo por ti?",
    "No se puede escribir software perfecto.<br/> El software no puede ser perfecto.<br/> Protege tu código y a tus usuarios de los errores inevitables.",
    "Falla pronto.<br/> Un programa muerto normalmente causa mucho menos daño que uno dañado.",
    "Utiliza excepciones para problemas excepcionales.<br/> Las excepciones pueden sufrir todos los problemas de legibilidad y mantenibilidad del clásico código espagueti.<br/> Reserva las excepciones para cosas excepcionales.",
    "Minimiza el acoplamiento entre módulos.<br/> Evita el acoplamiento escribiendo código «tímido» y aplicando la Ley de Deméter.",
    "Pon las abstracciones en el código y los detalles en los metadatos.<br/> Programa para el caso general y pon los detalles fuera de la base de código compilada.",
    "Diseña utilizando servicios.<br/> Diseña en términos de objetos concurrentes e independientes de los servicios, detrás de interfaces bien definidas y coherentes.",
    "Separa las vistas de los modelos.<br/> Gana flexibilidad a bajo coste diseñando tu aplicación en términos de modelos y vistas.",
    "No programes por casualidad.<br/> Confía solo en cosas fiables.<br/> Ten cuidado con la complejidad accidental y no confundas una coincidencia afortunada con un plan intencionado.",
    "Prueba tus estimaciones.<br/> El análisis matemático de los algoritmos no lo dice todo.<br/> Intenta cronometrar tu código en su entorno de destino.",
    "Diseña para probar.<br/> Empieza a pensar en las pruebas antes de escribir una línea de código.",
    "No utilices código de asistente que no entiendas.<br/> Los asistentes pueden generar montones de código.<br/> Asegúrate de entenderlo todo antes de incorporarlo a tu proyecto.",
    "Trabaja con un usuario para pensar como un usuario.<br/> Es la mejor manera de comprender cómo se utilizará realmente el sistema.",
    "Utiliza un glosario del proyecto.<br/> Crea y mantén una única fuente con todos los términos y vocabulario específicos de un proyecto.",
    "Empieza cuando estés listo.<br/> Has estado acumulando experiencia toda tu vida.<br/> No ignores las dudas molestas.",
    "No seas esclavo de los métodos formales.<br/> No adoptes ciegamente ninguna técnica sin ponerla en el contexto de tus prácticas y capacidades de desarrollo.",
    "Organiza los equipos en función de la funcionalidad.<br/> No separes a los diseñadores de los programadores, ni a los probadores de los modeladores de datos.<br/> Crea equipos del mismo modo que creas código.",
    "Prueba pronto.<br/> Prueba con frecuencia.<br/> Prueba automáticamente.<br/> Las pruebas que se ejecutan con cada compilación son mucho más efectivas que los planes de prueba que se quedan en un cajón.",
    "Utiliza saboteadores para probar tus pruebas.<br/> Introduce errores a propósito en una copia separada del código fuente para verificar que las pruebas los detectan.",
    "Encuentra los errores una sola vez.<br/> Una vez que un probador humano encuentra un error, debería ser la última vez que un probador humano encuentra ese error.<br/> Las pruebas automáticas deben comprobarlo a partir de ese momento.",
    "Firma tu trabajo.<br/>Los artesanos de épocas anteriores se enorgullecían de firmar sus obras.<br/> Tú también deberías hacerlo.",
    "Piensa dos veces, programa una vez.",
    "No importa lo lejos que hayas llegado por el camino equivocado, da media vuelta ahora mismo.",
    "¿Por qué nunca tenemos tiempo para hacerlo bien, pero siempre tenemos tiempo para volver a hacerlo?",
    "Semanas de programación pueden ahorrarte horas de planificación.",
    "Iterar es humano, recurrir es divino. <br/><br/><span style='float:right'>-L. Peter Deutsch</span>",
    "Los ordenadores son inútiles.<br/> Solo pueden darte respuestas. <br/><br/><span style='float:right'>-Pablo Picasso</span>",
    "La pregunta de si los ordenadores pueden pensar es como preguntarse si los submarinos pueden nadar. <br/><br/><span style='float:right'>-Edsger W. Dijkstra</span>",
    "Es ridículo vivir 100 años y solo ser capaz de recordar 30 millones de bytes.<br/> Ya sabes, menos que un disco compacto.<br/> La condición humana se está volviendo cada vez más obsoleta. <br/><br/><span style='float:right'>-Marvin Minsky</span>",
    "¿Te lo ha dicho el ordenador central de la ciudad? R2D2, ¡sabes muy bien que no hay que fiarse de un ordenador extraño! <br/><br/><span style='float:right'>-C3PO</span>",
    "La mayoría del software actual se parece mucho a una pirámide egipcia con millones de ladrillos apilados unos encima de otros, sin integridad estructural, sino construida a base de fuerza bruta y miles de esclavos. <br/><br/><span style='float:right'>-Alan Kay</span>",
    "Por fin he aprendido lo que significa «compatible con versiones anteriores».<br/> Significa que podemos conservar todos nuestros viejos errores. <br/><br/><span style='float:right'>-Dennie van Tassel</span>",
    "Hay dos productos importantes que salen de Berkeley: el LSD y UNIX.<br/> No creemos que sea una coincidencia. <br/><br/><span style='float:right'>-Jeremy S. Anderson</span>",
    "La mayor parte de las patentes son una mierda.<br/> Perder el tiempo leyéndolas es una estupidez.<br/> Es responsabilidad del propietario de la patente hacerlo y hacerlas cumplir. <br/><br/><span style='float:right'>-Linus Torvalds</span>",
    "Controlar la complejidad es la esencia de la programación informática. <br/><br/><span style='float:right'>-Brian Kernighan</span>",
    "La complejidad mata.<br/> Agota a los desarrolladores, dificulta la planificación, la creación y las pruebas de los productos, plantea retos de seguridad y causa frustración a los usuarios finales y a los administradores. <br/><br/><span style='float:right'>-Ray Ozzie</span>",
    "La función de un buen software es hacer que lo complejo parezca sencillo. <br/><br/><span style='float:right'>-Grady Booch</span>",
    "Hay una vieja historia sobre una persona que deseaba que su ordenador fuera tan fácil de usar como su teléfono.<br/> Ese deseo se ha hecho realidad, ya que ya no sé cómo usar mi teléfono. <br/><br/><span style='float:right'>-Bjarne Stroustrup</span>",
    "Solo hay dos industrias que se refieren a sus clientes como usuarios: <br/><br/><span style='float:right'>-Edward Tufte</span>",
    "La mayoría de ustedes están familiarizados con las virtudes de un programador.<br/> Hay tres, por supuesto: pereza, impaciencia y arrogancia. <br/><br/><span style='float:right'>-Larry Wall</span>",
    "La enseñanza de la informática no puede convertir a nadie en un programador experto, del mismo modo que estudiar pinceles y pigmentos no puede convertir a nadie en un pintor experto. <br/><br/><span style='float:right'>-Eric S. Raymond</span>",
    "El optimismo es un riesgo laboral de la programación; la retroalimentación es el tratamiento. <br/><br/><span style='float:right'>-Kent Beck</span>",
    "Primero, resuelve el problema.<br/> Luego, escribe el código <br/><br/><span style='float:right'>-John Johnson</span>",
    "Medir el progreso de la programación por líneas de código es como medir el progreso de la construcción de un avión por su peso. <br/><br/><span style='float:right'>-Bill Gates</span>",
    "No te preocupes si no funciona bien.<br/> Si todo funcionara, te quedarías sin trabajo. - Ley de Mosher sobre ingeniería de software",
    "Un programador LISP conoce el valor de todo, pero el coste de nada. <br/><br/><span style='float:right'>-Alan J. Perlis</span>",
    "Todos los problemas de la informática se pueden resolver con otro nivel de indirección. <br/><br/><span style='float:right'>-David Wheeler</span>",
    "Las funciones retrasan la vinculación; las estructuras de datos la inducen.<br/> Moraleja: estructura los datos al final del proceso de programación. <br/><br/><span style='float:right'>-Alan J. Perlis</span>",
    "Las cosas fáciles deben ser fáciles y las difíciles deben ser posibles. <br/><br/><span style='float:right'>-Larry Wall</span>",
    "No hay nada más permanente que una solución temporal",
    "Si no puedes explicarle algo a un niño de seis años, es que realmente tú tampoco lo entiendes. <br/><br/><span style='float:right'>-Albert Einstein</span>",
    "Toda programación es un ejercicio de almacenamiento en caché. <br/><br/><span style='float:right'>-Terje Mathisen</span>",
    "El software es difícil. <br/><br/><span style='float:right'>-Donald Knuth</span>",
    "No sabían que era imposible, ¡así que lo hicieron! <br/><br/><span style='float:right'>-Mark Twain</span>",
    "El modelo orientado a objetos facilita la creación de programas por acumulación.<br/> En la práctica, esto suele significar que proporciona una forma estructurada de escribir código espagueti. <br/><br/><span style='float:right'>-Paul Graham</span>",
    "Pregunta: ¿Cómo es posible que un gran proyecto de software se retrase un año? Respuesta: ¡Un día tras otro!",
    "El primer 90 % del código representa el primer 90 % del tiempo de desarrollo.<br/> El 10 % restante del código representa el otro 90 % del tiempo de desarrollo. <br/><br/><span style='float:right'>-Tom Cargill</span>",
    "En el ámbito del software, rara vez tenemos requisitos significativos.<br/> Incluso si los tenemos, la única medida de éxito que importa es si nuestra solución resuelve la idea cambiante que tiene el cliente de cuál es su problema. <br/><br/><span style='float:right'>-Jeff Atwood</span>",
    "Si la depuración es el proceso de eliminar errores, entonces la programación debe ser el proceso de introducirlos. <br/><br/><span style='float:right'>-Edsger W. Dijkstra</span>",
    "640 K deberían ser suficientes para cualquiera. <br/><br/><span style='float:right'>-Bill Gates, 1981</span>",
    "Desarrollar la tolerancia a la imperfección es el factor clave para convertir a los que siempre empiezan en personas que siempre terminan. <br/><br/><span style='float:right'>-Jon Acuff</span>",
    "Todos los grandes desarrolladores que conoces llegaron a serlo resolviendo problemas para los que no estaban cualificados hasta que realmente lo hicieron. <br/><br/><span style='float:right'>-Patrick McKenzie</span>",
    "Al usuario medio le da igual lo que pase, siempre y cuando (1) funcione y (2) sea rápido. <br/><br/><span style='float:right'>-Daniel J. Bernstein</span>",
    "Caminar sobre el agua y desarrollar software a partir de unas especificaciones es fácil si ambos están congelados. <br/><br/><span style='float:right'>-Edward V. Berard</span>",
    "Sé curioso.<br/> Lee mucho.<br/> Prueba cosas nuevas.<br/> Creo que gran parte de lo que la gente llama inteligencia se reduce a la curiosidad. <br/><br/><span style='float:right'>-Aaron Swartz</span>",
    "Lo que un programador puede hacer en un mes, dos programadores pueden hacerlo en dos meses. <br/><br/><span style='float:right'>-Frederick P. Brooks</span>",
];

const fechaActual = new Date();
const diaDelMes = fechaActual.getDate();
const indiceFrase = (diaDelMes - 1) % frasesDelDia.length;
const fraseDelDia = frasesDelDia[indiceFrase];
const random = Math.floor(Math.random() * frasesDelDia.length);
console.log("Frase del día: " + fraseDelDia);
//document.getElementById("frase").innerText = frasesDelDia[random];
var str = frasesDelDia[random],
    i = 0,
    isTag,
    text;
(function type() {
    text = str.slice(0, ++i);
    if (text === str) return;

    document.getElementById('frase').innerHTML = text;

    var char = text.slice(-1);
    if( char === '<' || char==='&') isTag = true;
    if( char === '>' || char===';') isTag = false;

    if (isTag) return type();
    setTimeout(type, 80);
}());